/*! website 30-03-2017 */
"use strict";
angular.module("ngBus.controllers", []), angular.module("ngBus.services", []), angular.module("ngBus.config", []), angular.module("ngBus.directives", []), angular.module("ngBus.filters", []), angular.module("ngBus", ["ngRoute", "ngCookies", "ngAnimate", "ngSanitize", "flash", "angularModalService", "ngBus.controllers", "ngBus.services", "ngBus.config", "ngBus.directives", "ngBus.filters"]).config(["$routeProvider", "$compileProvider", function(a, b) { b.debugInfoEnabled(!1); var c = angular.element("html").attr("lang"),
        d = "20170313151900";
    a.when("/step1/:departureDate?/:numOfTicket?", { templateUrl: function(a) { var b; switch (c) {
                case "en-US":
                    b = "/Content/modules/booking/partials/step1.en-US.html?vk=" + d; break;
                default:
                    b = "/Content/modules/booking/partials/step1.html?vk=" + d } return b }, controller: "Step1Ctrl" }), a.when("/step2", { templateUrl: function(a) { var b; switch (c) {
                case "en-US":
                    b = "/Content/modules/booking/partials/step2.en-US.html?vk=" + d; break;
                default:
                    b = "/Content/modules/booking/partials/step2.html?vk=" + d } return b }, controller: "Step2Ctrl" }), a.when("/step3", { templateUrl: function(a) { var b; switch (c) {
                case "en-US":
                    b = "/Content/modules/booking/partials/step3.en-US.html?k=" + d; break;
                default:
                    b = "/Content/modules/booking/partials/step3.html?k=" + d } return b }, controller: "Step3Ctrl" }), a.when("/step4/:code?", { templateUrl: function(a) { var b; switch (c) {
                case "en-US":
                    b = "/Content/modules/booking/partials/step4.en-US.html?k=" + d; break;
                default:
                    b = "/Content/modules/booking/partials/step4.html?k=" + d } return b }, controller: "Step4Ctrl" }), a.otherwise({ redirectTo: "/step1" }) }]), angular.module("ngBus.controllers", []).run(["$rootScope", "$templateCache", "$location", function(a, b, c) { c.hash("busApp"), a.$on("$viewContentLoaded", function() { dataLayer.push({ event: "VirtualPageView", virtualPageURL: c.url(), virtualPageTitle: "Step 1" }) }), a.$on("scope.stored", function(a, b) { console.log("scope.stored", b) }), a.$broadcast("loader_hide") }]).factory("Scopes", ["$rootScope", function(a) { var b = { locale: angular.element("html").attr("lang") }; return { store: function(c, d) { a.$emit("scope.stored", c), b[c] = d }, get: function(a) { return b[a] } } }]).controller("ModalCtrl", ["$scope", "close", function(a, b) { a.close = function(a) { b(a, 500) } }]).controller("LoginCtrl", ["$scope", "code", "promocode", "$element", "Scopes", "close", "Factory", "$rootScope", "Flash", function(a, b, c, d, e, f, g, h, i) { a.errors = [], a.close = function(a) { d.modal("hide"), f(a, 200) }, a.code = b, a.promocode = c, a.login = function() { h.$broadcast("loader_show"), a.errors = [], g.login(a.username, a.password).then(function(b) { 1 === b.Status ? (h.$broadcast("loader_show"), g.payViFuta(a.code, a.promocode).then(function(b) { 1 === b.Status ? document.location = "/vi-VN/Booking/Confirm?bookingNo={0}".format(a.code) : a.showError(b.Message), h.$broadcast("loader_hide") }), a.close(!1)) : a.errors.push("Tên đăng nhập hoặc mật khẩu không đúng"), h.$broadcast("loader_hide") }) }, a.showError = function(a) { i.create("danger", a, "custom-alert") } }]).controller("Step1Ctrl", ["$scope", "$routeParams", "Config", "Factory", "$location", "Scopes", "$rootScope", "Flash", function(a, b, c, d, e, f, g, h) { a.settings = settings, g.$broadcast("loader_hide"), a.info = { fromStop: null, toStop: null, departureDate: null, numOfTicket: 1 }, a.routes = routes, a.distance = 0, a.duration = 0, a.routeId = 0, a.pickUpPoints = [], a.shipPoints = [], a.currentTab = 0, a.currentPage = 1, a.numRowPerPage = 100, a.matchRoutes = []; var i = moment(settings.ValidStartDateOffset, "YYYY-MM-DDTHH:mm:ss.000");
    moment().diff(i, "day") >= 0 && (i = moment().add(settings.ValidStartDateOffset, "day")); var j = moment(settings.ValidEndDate, "YYYY-MM-DDTHH:mm:ss.000");
    a.startDate = i, a.endDate = j, a.initData = function() { a.info = $.extend({}, a.info, f.get("step1")); for (var d = angular.element("#busApp").attr("fs"), e = angular.element("#busApp").attr("ts"), g = 0; g < routes.length; g++) routes[g].OriginCode === d && routes[g].DestCode === e && (a.info.fromStop = { v: routes[g].OriginCode, t: routes[g].OriginName }, a.info.toStop = { v: routes[g].DestCode, t: routes[g].DestName }, a.matchRoutes.push(routes[g]), a.routeId = parseInt(routes[g].Id));
        null != b.departureDate && null != b.numOfTicket ? (a.info.departureDate = moment(b.departureDate, c.defaultConfig.dateFormat), a.info.numOfTicket = parseInt(b.numOfTicket), a.next(!0)) : null == a.info.departureDate && (a.info.departureDate = moment().add(1, "days").startOf("day")) }, a.next = function(b) { b && (f.store("step1", angular.copy(a.info)), e.path("/step2")) }, a.showError = function(a) { var b = "";
        $.each(a, function(a, d) { switch (a) {
                case "required":
                    for (var e = 0; e < d.length; e++) switch (d[e].$name) {
                        case "departureDate":
                            b += c.errorMessages[f.get("locale")].departureDate + "<br />" } } }), h.create("danger", b, "custom-alert") }, a.getMap = function() { if (angular.element(".map-canvas").is(":empty")) { for (var b = [], c = a.matchRoutes[0], d = 0; d < c.RouteStops.length; d++) b.push("{0},{1}".format(c.RouteStops[d].Latitude, c.RouteStops[d].Longitude));
            angular.element(".map-canvas").getMapDirection(b) } }, a.getPickupPoints = function() { 0 === a.pickUpPoints.length && (g.$broadcast("loader_show"), d.getPickupPointsInRoute(a.routeId).then(function(b) { 1 === b.Status && (a.pickUpPoints = b.Data), g.$broadcast("loader_hide") })) }, a.getShipPoints = function() { 0 === a.shipPoints.length && (g.$broadcast("loader_show"), d.getShipPoints(a.routeId, a.currentPage, a.numRowPerPage).then(function(b) { 1 === b.Status && (a.shipPoints = a.shipPoints.concat(b.Data)), g.$broadcast("loader_hide") })) }, a.changeTab = function(b) { a.currentTab = b }, a.$watch("currentTab", function(a, b, c) { if (a !== b) switch (a) {
            case 1:
                c.getPickupPoints(); break;
            case 2:
                c.getShipPoints() } }), a.specialRanges = [], a.$watchGroup(["info.fromStop", "info.toStop"], function(b, c, d) { if (b != c) { var e = []; if ("undefined" != settings.SpecialDepartures, !0)
                for (var f = 0; f < settings.SpecialDepartures.length; f++) { var g = settings.SpecialDepartures[f];
                    g.FromCode == d.info.fromStop.v && g.ToCode == d.info.toStop.v && e.push({ s: g.ValidStartDate, e: g.ValidEndDate }) }
            a.specialRanges = e } }), a.isActiveTab = function(b) { return a.currentTab === b }, a.initData() }]).controller("Step3Ctrl", ["$scope", "$routeParams", "Config", "Factory", "$location", "Scopes", "$rootScope", "Flash", "ModalService", function(a, b, c, d, e, f, g, h, i) { a.info = { CustName: "", CustEmail: "", CustSN: "", CustMobile: "", CustMobile2: "", AcceptCondition: 0, CustCountry: null, CustCity: "", CustAddress: "", CustState: null, CustProvince: null, CustCity2: null, CustBirthDay: null }, a.countries = [], a.states = [], a.provinces = [], a.cities = [], a.maxDate = moment(), a.initData = function() { a.info = $.extend({}, a.info, f.get("step3")), "undefined" == typeof f.get("step2") && (g.$broadcast("loader_hide"), e.path("/step2")), "undefined" == typeof f.get("step1") && (g.$broadcast("loader_hide"), e.path("/step1")), "undefined" != typeof suser && null != suser && (a.info.CustName = suser.CustName, a.info.CustMobile = suser.CustMobile, a.info.CustEmail = suser.CustEmail, a.info.CustSN = suser.CustSN, a.info.CustProvince = { Value: suser.ProvinceId }, a.info.CustCity2 = { Value: suser.CityId }), "vi-VN" !== f.get("locale") ? a.getCountries() : a.getProvinces() }, a.next = function(b) { if (b) { var c = []; "vi-VN" === f.get("locale") && (0 === a.info.CustProvince.Value && c.push({ $name: "CustProvince" }), 0 === a.info.CustCity2.Value && c.push({ $name: "CustCity2" })), c.length > 0 ? a.showError({ required: c }) : (f.store("step3", angular.copy(a.info)), e.path("/step4")) } }, a.prev = function() { g.$broadcast("loader_hide"), f.store("step3", angular.copy(a.info)), e.path("/step2") }, a.showError = function(a) { var b = "";
        $.each(a, function(a, d) { var e; switch (a) {
                case "required":
                    for (e = 0; e < d.length; e++) b += c.errorMessages[f.get("locale")][d[e].$name] + "<br />"; break;
                case "futaNumber":
                    for (e = 0; e < d.length; e++) b += c.futaNumberMessage[f.get("locale")][d[e].$name] + "<br />";
                case "email":
                    for (e = 0; e < d.length; e++) b += c.emailMessage[f.get("locale")][d[e].$name] + "<br />" } }), h.create("danger", b, "custom-alert") }, a.showPolicies = function() { var a; switch (f.get("locale")) {
            case "en-US":
                a = "/Content/modules/booking/partials/policies.en-US.html"; break;
            default:
                a = "/Content/modules/booking/partials/policies.html" }
        i.showModal({ templateUrl: a, controller: "ModalCtrl" }).then(function(a) { a.element.modal() }) }, a.getCountries = function() { a.countries = countries, a.info.CustCountry = countries[241] }, a.getProvinces = function() { g.$broadcast("loader_show"), a.getProvinceComplete = !1, d.getProvince().then(function(b) { if (a.provinces = [{ Value: 0, DisplayText: "Chọn tỉnh/tp" }], 1 === b.Status)
                for (var c = b.Data, d = 0; d < c.length; d++) a.provinces.push({ Value: c[d].Id, DisplayText: c[d].Name });
            null == a.info.CustProvince ? a.info.CustProvince = a.provinces[0] : a.getCity(), a.getProvinceComplete = !0, g.$broadcast("loader_hide") }) }, a.getCity = function() { a.cities = [{ Value: 0, DisplayText: "Chọn quận/huyện" }], a.info.CustProvince.Value > 0 && (g.$broadcast("loader_show"), a.getCityComplete = !1, d.getCity(a.info.CustProvince.Value).then(function(b) { if (1 === b.Status)
                for (var c = b.Data, d = 0; d < c.length; d++) a.cities.push({ Value: c[d].Id, DisplayText: c[d].Name });
            a.getCityComplete = !0, g.$broadcast("loader_hide") })), null == a.info.CustCity2 && (a.info.CustCity2 = a.cities[0]) }, a.$watch("info.CustCountry", function(a, b, c) { if (a !== b && null != a) switch (a.Code) {
            case "US":
            case "CA":
            case "UM":
                c.states = states[a.Code], c.info.CustState = states[a.Code][0]; break;
            default:
                c.states = [], c.info.CustState = null } }), a.$watch("info.CustProvince", function(a, b, c) { a !== b && null != a && c.getCity() }), a.initData() }]).controller("Step2Ctrl", ["$scope", "$routeParams", "Config", "Factory", "$location", "Scopes", "$rootScope", "Flash", function(a, b, c, d, e, f, g, h) { a.info = { selectRoute: null, departureTime: null, pickUpPoint: null, selectSeats: [], price: 0, total: 0, goldHourSelected: !1 }, a.step1Info = null, a.fromStation = "", a.toStation = "", a.selectSeatNum = 0, a.goldHour = !1, a.schedules = [], a.timeTables = [], a.pickUpPoints = [], a.seats = [], a.currentTab = 0, a.dropOffDateTime = null, a.duration = ""; var i = parseInt(settings.MaxBookSeat);
    isNaN(i) && (i = 1), a.maxBookSeat = i, a.initData = function() { a.info = $.extend({}, a.info, f.get("step2")), "undefined" == typeof f.get("step1") && (g.$broadcast("loader_hide"), e.path("/step1")), a.step1Info = f.get("step1"), a.getSchedules() }, a.next = function(b) { b && (f.store("step2", angular.copy(a.info)), dataLayer.push({ event: "addToCart", ecommerce: { currencyCode: "VND", add: { products: [{ name: "{0}-{1}".format(a.info.departureTime.Time, a.info.selectRoute.Name), id: "{0}-{1}-{2}".format(a.step1Info.departureDate.format(c.defaultConfig.dateFormat), a.info.departureTime.Time, a.info.selectRoute.Name), price: a.info.selectRoute.Price, list: "{0} - {1}".format(a.step1Info.fromStop.t, a.step1Info.toStop.t), brand: "Phương Trang", category: a.info.selectRoute.Name, variant: a.info.departureTime.Kind, quantity: a.info.selectSeats.length }] } } }), e.path("/step3")) }, a.prev = function() { g.$broadcast("loader_hide"), f.store("step2", angular.copy(a.info)), e.path("/step1") }, a.changeTab = function(b) { a.currentTab = b }, a.selectSeat = function(b) { if (0 === b.Status || 2 === b.Status) { var c = a.info.selectSeats.indexOf(b),
                d = !1; switch (c) {
                case -1:
                    a.info.selectSeats.length < a.maxBookSeat ? (a.info.selectSeats.push(b), d = !0) : a.showError({ max: [{ $name: "selectSeatNum" }] }); break;
                default:
                    a.info.selectSeats.splice(c, 1) }
            a.maskSelectedSeat(b, d) } }, a.maskSelectedSeat = function(b, c) { var d, e, f; switch (a.info.departureTime.Kind) {
            case "Ghế":
                for (d = 0; d < a.seats.length; d++)
                    if ("undefined" != typeof a.seats[d])
                        for (e = 0; e < a.seats[d].length; e++) "undefined" != typeof a.seats[d][e] && a.seats[d][e].Id === b.Id && (1 === a.seats[d][e].Status ? (f = a.info.selectSeats.indexOf(b), f !== -1 && a.info.selectSeats.splice(f, 1)) : a.seats[d][e].Status = c === !0 ? 2 : 0);
                break;
            case "Giường":
            case "Limousine":
                for (d = 0; d < a.seats.length; d++)
                    if ("undefined" != typeof a.seats[d])
                        for (e = 0; e < a.seats[d].length; e++)
                            if ("undefined" != typeof a.seats[d][e])
                                for (var g = 0; g < a.seats[d][e].length; g++) "undefined" != typeof a.seats[d][e][g] && a.seats[d][e][g].Id === b.Id && (1 === a.seats[d][e][g].Status ? (f = a.info.selectSeats.indexOf(b), f !== -1 && a.info.selectSeats.splice(f, 1)) : a.seats[d][e][g].Status = c === !0 ? 2 : 0) } }, a.showError = function(a) { var b = "";
        $.each(a, function(a, d) { var e; switch (a) {
                case "required":
                    for (e = 0; e < d.length; e++) b += c.errorMessages[f.get("locale")][d[e].$name] + "<br />"; break;
                case "min":
                    for (e = 0; e < d.length; e++) b += c.minMessages[f.get("locale")][d[e].$name] + "<br />"; break;
                case "max":
                    for (e = 0; e < d.length; e++) b += c.maxMessages[f.get("locale")][d[e].$name] + "<br />" } }), h.create("danger", b, "custom-alert") }, a.getSchedules = function() { try { g.$broadcast("loader_show"), a.getScheduleComplete = !1, d.getSchedules(a.step1Info.fromStop.v, a.step1Info.toStop.v, a.step1Info.departureDate.format(c.defaultConfig.dateFormat)).then(function(b) { if (a.schedules = [], a.info.selectSeats = [], 1 === b.Status) { for (var c = b.Data, d = !1, e = 0; e < c.length; e++) parseInt(c[e].Price) > 0 && (a.schedules.push(c[e]), null != a.info.selectRoute && c[e].Id === a.info.selectRoute.Id && (a.info.selectRoute = c[e], d = !0));
                    d || (a.info.selectRoute = a.schedules[0]) }
                a.getScheduleComplete = !0, g.$broadcast("loader_hide") }) } catch (a) { console.log("Error: " + a) } }, a.getTimeTables = function() { g.$broadcast("loader_show"), a.getTimeTableComplete = !1, d.getTimeTables(a.info.selectRoute.Id, a.step1Info.departureDate.format(c.defaultConfig.dateFormat)).then(function(b) { if (a.timeTables = [], a.info.selectSeats = [], 1 === b.Status) { for (var d = b.Data, e = !1, h = f.get("locale"), i = 0; i < d.length; i++) d[i].DisplayText = d[i].Time + " (" + c.seatTypes[h][d[i].IDKind] + ")", a.timeTables.push(d[i]), null != a.info.departureTime && d[i].Time === a.info.departureTime.Time && (a.info.departureTime = d[i], e = !0);
                e || (a.info.departureTime = d[0]) }
            a.getTimeTableComplete = !0, g.$broadcast("loader_hide") }) }, a.getPickupPoints = function() { g.$broadcast("loader_show"), a.getPickUpPointComplete = !1, d.getPickupPoints(a.info.selectRoute.Id, a.info.departureTime.Time, a.step1Info.departureDate.format(c.defaultConfig.dateFormat)).then(function(b) { if (a.pickUpPoints = [], 1 === b.Status) { for (var c = b.Data, d = !1, e = null, f = 0; f < c.length; f++) a.pickUpPoints.push(c[f]), null != a.info.pickUpPoint && c[f].Id === a.info.pickUpPoint.Id && (a.info.pickUpPoint = c[f], d = !0), 0 == c[f].Type && (e = c[f]);
                d || (null != e ? a.info.pickUpPoint = e : a.info.pickUpPoint = a.pickUpPoints[0]) }
            a.getPickUpPointComplete = !0, g.$broadcast("loader_hide") }) }, a.getSeats = function() { g.$broadcast("loader_show"), a.getSeatComplete = !1, a.goldHour = !1, a.info.goldHourSelected = !1, a.total = 0, d.getSeats(a.info.selectRoute.Id, a.step1Info.departureDate.format(c.defaultConfig.dateFormat), a.info.departureTime.Time, a.info.departureTime.Kind, a.info.departureTime.Id).then(function(b) { if (a.seats = [], a.info.selectSeats = [], a.currentTab = 0, 1 === b.Status) { var c, d, e = b.Data; if ("Ghế" === a.info.departureTime.Kind)
                    for (var f = 0; f < e.length; f++) { c = parseInt(e[f].RowNo), isNaN(c) && (c = 1), d = parseInt(e[f].ColumnNo), isNaN(d) && (d = 1), "undefined" == typeof a.seats[c - 1] && (a.seats[c - 1] = []); var h = parseInt(e[f].Discount);
                        isNaN(h) && (h = 0), a.seats[c - 1][d - 1] = { Id: e[f].Id, Chair: e[f].Chair, Status: 0 === e[f].BookStatus && 0 === e[f].LockChair && 0 === e[f].InSelect ? 0 : 1, Discount: h }, h > 0 && (a.goldHour = !0) } else
                        for (f = 0; f < e.length; f++) { var i = parseInt(e[f].FloorNo);
                            isNaN(i) && (i = 1), c = parseInt(e[f].RowNo), isNaN(c) && (c = 1), d = parseInt(e[f].ColumnNo), isNaN(d) && (d = 1), "undefined" == typeof a.seats[i - 1] && (a.seats[i - 1] = []), "undefined" == typeof a.seats[i - 1][c - 1] && (a.seats[i - 1][c - 1] = []); var h = parseInt(e[f].Discount);
                            isNaN(h) && (h = 0), a.seats[i - 1][c - 1][d - 1] = { Id: e[f].Id, Chair: e[f].Chair, Status: 0 === e[f].BookStatus && 0 === e[f].LockChair && 0 === e[f].InSelect ? 0 : 1, Discount: h }, h > 0 && (a.goldHour = !0) } }
            a.getSeatComplete = !0, g.$broadcast("loader_hide") }) }, a.getPrice = function() { g.$broadcast("loader_show"), a.getPriceComplete = !1, d.getPrice(a.info.selectRoute.Id, a.step1Info.departureDate.format(c.defaultConfig.dateFormat), a.info.departureTime.IDKind).then(function(b) { if (a.info.price = 0, 1 === b.Status) { var c = b.Data,
                    d = parseInt(c.Price);
                isNaN(d) && (d = 0), a.info.price = d }
            a.getPriceComplete = !0, g.$broadcast("loader_hide") }) }, a.$watch("info.selectRoute", function(a, b, c) { if (a !== b && null != a) { for (var d = null, e = 0; e < c.schedules.length; e++) null != c.info.selectRoute && c.schedules[e].Id === c.info.selectRoute.Id && (d = c.schedules[e]); if (null == d && (d = c.schedules[0]), null != d) { c.info.selectRoute = d; var f = d.Name.split(" ⇒ ");
                c.fromStation = f[0], c.toStation = f[1] }
            c.getTimeTables() } }), a.$watch("info.departureTime", function(b, c, d) { if (b !== c && null != b) { var e = moment(angular.copy(d.step1Info.departureDate)).startOf("day"),
                f = angular.copy(d.info.departureTime).Time.split(":");
            e.add(parseInt(f[0]), "h"), e.add(parseInt(f[1]), "m"), e.add(d.info.selectRoute.Duration, "s"), d.dropOffDateTime = e; var g = moment.duration(d.info.selectRoute.Duration, "seconds");
            d.duration = g.humanize(), a.pickUpPoint = null, a.info.price = 0, a.getPrice(), a.getPickupPoints() } }), a.$watch("info.selectSeats.length", function(b, c, d) { a.info.goldHourSelected = !1, d.selectSeatNum = d.info.selectSeats.length, d.info.total = d.info.selectSeats.length * d.info.price; for (var e = 0; e < d.info.selectSeats.length; e++) { var f = parseInt(d.info.selectSeats[e].Discount);
            isNaN(f) && (f = 0), f > 0 && (a.info.goldHourSelected = !0), d.info.total -= f } }), a.$watch("info.price", function(b, c, d) { a.seats = [], a.info.selectSeats = [], a.currentTab = 0, b > 0 && a.getSeats() }), a.initData() }]).controller("Step4Ctrl", ["$scope", "$routeParams", "Config", "Factory", "$location", "Scopes", "$rootScope", "Flash", "ModalService", function(a, b, c, d, e, f, g, h, i) { a.info = { gateWay: "", paymentType: "", bank: "" }, a.step3Info = null, a.step2Info = null, a.step1Info = null, a.isRebooking = 0, a.oldSelectBankCode = "", a.isCanPay = !1, a.paymentTypes = {}, a.gateway = {}, a.errors = [], a.initData = function() { null != b.code && "" !== b.code && (a.isRebooking = 1, g.$broadcast("loader_show"), f.store("step1", {}), f.store("step2", {}), f.store("step3", { selectRoute: { Price: 0 }, selectSeats: [], total: 0 }), d.getDetail(b.code).then(function(b) { if (1 === b.Status) { var c, d = b.Data,
                    e = !1; for (c = 0; c < routes.length && !e; c++) routes[c].Id === parseInt(d.TuyenDuongId) && (a.step1Info.fromStop = { v: routes[c].OriginCode, t: routes[c].OriginName }, a.step1Info.toStop = { v: routes[c].DestCode, t: routes[c].DestName }, a.step2Info.selectRoute = routes[c], e = !0);
                a.step2Info.selectRoute.Price = d.TicketDetails[0].price, a.step2Info.total = 0; for (var f = 0; f < d.TicketDetails.length; f++) { var h = parseInt(d.TicketDetails[f].Discount);
                    isNaN(h) && (h = 0), a.step2Info.total += parseInt(d.TicketDetails[f].price) - h }
                a.step1Info.departureDate = moment(d.NgayDi), a.step1Info.numOfTicket = d.NumOfTicket, a.step3Info.CustName = d.CustName, a.step3Info.CustEmail = d.CustEmail, a.step3Info.CustMobile = d.CustMobile, a.step3Info.CustMobile2 = d.CustMobile2, a.step3Info.CustSN = d.CustCMND; var f; if (null != d.country && "" !== d.country) { for (e = !1, c = 0; c < countries.length && !e; c++) countries[c].Code === d.country && (a.step2Info.CustCountry = countries[c], e = !0); if (null != d.state && "" !== d.state) switch (d.country) {
                        case "CA":
                        case "US":
                        case "UM":
                            for (e = !1, f = 0; f < states[d.country].length && !e; f++) states[d.country][f].Code === d.state && (a.step2Info.CustState = states[d.country][f], e = !0); break;
                        default:
                            a.step2Info.CustState = null } else a.step2Info.CustState = null } else a.step2Info.CustCountry = null, a.step2Info.CustState = null; for (a.step3Info.CustAddress = d.CustAddress, a.step3Info.CustCity = d.city, a.step2Info.departureTime = { Id: d.TicketDetails[0].carBookingId, Time: d.GioDi }, a.step2Info.pickUpPoint = { Id: d.CustPickupOfficeId, Address: d.CustPickup }, a.step2Info.selectSeats = [], f = 0; f < d.TicketDetails.length; f++) a.step2Info.selectSeats.push({ Id: d.TicketDetails[f].TicketId, Chair: d.TicketDetails[f].TicketName });
                a.oldSelectBankCode = d.BankCode }
            g.$broadcast("loader_hide") })), "undefined" == typeof f.get("step3") && (g.$broadcast("loader_hide"), e.path("/step3")), "undefined" == typeof f.get("step2") && (g.$broadcast("loader_hide"), e.path("/step2")), "undefined" == typeof f.get("step1") && (g.$broadcast("loader_hide"), e.path("/step1")), a.step3Info = f.get("step3"), a.step2Info = f.get("step2"), a.step1Info = f.get("step1"), a.getSupportPayment() }, a.book = function() { if (a.validateForm()) { f.store("step4", angular.copy(a.info)), g.$broadcast("loader_show"); var b = { CustName: a.step3Info.CustName, CustEmail: a.step3Info.CustEmail, CustMobile: a.step3Info.CustMobile, CustMobile2: a.step3Info.CustMobile2, CustSN: a.step3Info.CustSN, RouteId: a.step2Info.selectRoute.Id, RouteName: a.step2Info.selectRoute.Name, DepartureDate: a.step1Info.departureDate.format(c.defaultConfig.dateFormat), DepartureTime: a.step2Info.departureTime.Time, NumOfTicket: a.step2Info.selectSeats.length, CarBookingId: a.step2Info.departureTime.Id, SeatIds: a.step2Info.selectSeats.map(function(a) { return a.Id }), SeatNames: a.step2Info.selectSeats.map(function(a) { return a.Chair }), OfficePickupId: a.step2Info.pickUpPoint.OfficeId, PickUpStreet: a.step2Info.pickUpPoint.Address }; "undefined" != typeof a.step3Info.CustBirthDay && null != a.step3Info.CustBirthDay && (b.CustBirthDay = a.step3Info.CustBirthDay.format(c.defaultConfig.isoDateTimeFormat)), "vi-VN" !== f.get("locale") ? (b.CustAddress = a.step3Info.CustAddress, b.CustCity = a.step3Info.CustCity, null != a.step3Info.CustCountry && (b.CustCountry = a.step3Info.CustCountry.Code), null != a.step3Info.CustState && (b.CustState = a.step3Info.CustState.Code), b.Locale = "en-US", b.EnglishTicket = 1) : (b.CustCountry = "VN", null != a.step3Info.CustProvince && (b.CustState = a.step3Info.CustProvince.DisplayText), null != a.step3Info.CustCity2 && (b.CustCity = a.step3Info.CustCity2.DisplayText)), d.bookSeat(b, a.isRebooking).then(function(e) { if (1 === e.Status) { var h = "{0}/webpayticket?BookingNo={1}".format(c.baseApiUrl, e.Data.Code); switch (a.info.gateWay) {
                        case "ViFuta":
                            break;
                        default:
                            h += "&PaymentGateway={0}&PaymentType={1}&BankCode={2}".format(a.info.gateWay, a.info.paymentType, a.info.bank) } "vi-VN" !== f.get("locale") && (h += "&Locale=en-US"), dataLayer.push({ event: "checkout", ecommerce: { currencyCode: "VND", checkout: { actionField: { step: 1, option: a.info.bank }, products: [{ name: "{0}-{1}".format(b.DepartureTime, b.RouteName), id: "{0}-{1}-{2}".format(b.DepartureDate, b.DepartureTime, b.RouteName), price: a.step2Info.selectRoute.Price, list: "{0} - {1}".format(a.step1Info.fromStop.t, a.step1Info.toStop.t), brand: "Phương Trang", category: b.RouteName, variant: a.step2Info.departureTime.Kind, quantity: a.step2Info.selectSeats.length }] } }, eventCallback: function() { switch (a.info.gateWay) {
                                case "ViFuta":
                                    "undefined" != typeof suser && null != suser ? (g.$broadcast("loader_show"), d.payViFuta(e.Data.Code, a.info.PromoCode).then(function(b) { 1 === b.Status ? document.location = "/vi-VN/Booking/Confirm?bookingNo={0}".format(e.Data.Code) : a.showError({ bookmsg: [{ $name: "error", $message: b.Message }] }), g.$broadcast("loader_hide") })) : a.showLogin(e.Data.Code, a.info.PromoCode); break;
                                default:
                                    document.location = h } } }) } else a.showError({ bookmsg: [{ $name: "error", $message: e.Message }] });
                g.$broadcast("loader_hide") }) } else a.showError(a.errors) }, a.prev = function() { g.$broadcast("loader_hide"), f.store("step4", angular.copy(a.info)), e.path("/step3") }, a.selectGateway = function(b, c) { switch (a.info.gateWay = b, c) {
            case 1:
                a.showSelectBank(a.gateway[b]); break;
            default:
                var d = Object.keys(a.gateway[b].data)[0];
                a.info.paymentType = d, a.info.bank = d } }, a.validateForm = function() { var b = !0; return a.errors = {}, "" == a.info.gateway && ("undefined" == typeof a.errors.required && (a.errors.required = []), a.errors.required.push({ $name: "selectGateway" }), b = !1), "" == a.info.paymentType && ("undefined" == typeof a.errors.required && (a.errors.required = []), a.errors.required.push({ $name: "selectPaymentType" }), b = !1), "" == a.info.bank && ("undefined" == typeof a.errors.required && (a.errors.required = []), a.errors.required.push({ $name: "selectBank" }), b = !1), b }, a.showError = function(a) { var b = "";
        $.each(a, function(a, d) { var e; switch (a) {
                case "required":
                    for (e = 0; e < d.length; e++) b += c.errorMessages[f.get("locale")][d[e].$name] + "<br />"; break;
                case "bookmsg":
                    for (e = 0; e < d.length; e++) switch (d[e].$name) {
                        case "error":
                            b += d[e].$message } } }), h.create("danger", b, "custom-alert") }, a.getSupportPayment = function() { var b = moment().weekday();
        g.$broadcast("loader_show"); for (var c = {}, d = 0; d < settings.Gateway.length; d++) { var e = settings.Gateway[d]; "undefined" == typeof c[e.GatewayCode] && (c[e.GatewayCode] = { name: e.GatewayName, type: e.Type, data: {} }), "undefined" == typeof c[e.GatewayCode].data[e.PaymentTypeCode] && (c[e.GatewayCode].data[e.PaymentTypeCode] = { name: e.PaymentTypeName, data: {} }), c[e.GatewayCode].data[e.PaymentTypeCode].data[e.Code] = { name: e.Name, cssClass: e.CssClass }; var f = null,
                h = null; "undefined" != typeof e.FromTime && null != e.FromTime && "" != e.FromTime && (f = moment(e.FromTime, "HH:ss")), "undefined" != typeof e.ToTime && null != e.ToTime && "" != e.ToTime && (h = moment(e.ToTime, "HH:ss")), null != f && null != h && (5 == b || 6 == b || moment().isBefore(f) || moment().isAfter(h)) && delete c[e.GatewayCode] }
        a.gateway = c, g.$broadcast("loader_hide") }, a.checkPromoCode = function(b, c, e) { g.$broadcast("loader_show"), d.checkPromoCode(b, c, e).then(function(b) { 1 == b.Status ? (a.info.Discount = parseInt(b.Data), a.apc = !0) : (a.info.PromoCode = "", a.info.Discount = 0, a.apc = !1, a.showError({ bookmsg: [{ $name: "error", $message: b.Message }] })), g.$broadcast("loader_hide") }) }, a.showLogin = function(a, b) { var c = "/Content/modules/booking/partials/login.html";
        i.showModal({ templateUrl: c, controller: "LoginCtrl", animation: !1, inputs: { code: a, promocode: b } }).then(function(a) { a.element.modal() }) }, a.showSelectBank = function(b) { var c = "/Content/modules/booking/partials/selectbank.html";
        console.log(f.get("locale")), "en-US" == f.get("locale") && (c = "/Content/modules/booking/partials/selectbank.en-US.html"), i.showModal({ templateUrl: c, controller: "SelectBankCtrl", animation: !1, inputs: { parent: a, gw: b } }).then(function(a) { a.element.modal() }) }, a.applyPromoCode = function(b) { for (var d = !1, e = 0; e < a.step3Info.selectSeats.length && !d; e++) a.step3Info.selectSeats[e].Discount > 0 && (d = !0); if (d) a.apc = !1, a.info.PromoCode = "", a.info.Discount = 0, a.showError({ bookmsg: [{ $name: "error", $message: c.errorMessages[f.get("locale")].promoCodePolicy }] });
        else if (/^[A-Z0-9]{6}$/.test(a.info.PromoCode)) switch (b) {
            case 1:
                a.checkPromoCode(a.info.PromoCode, a.step3Info.selectRoute.Id, a.step1Info.departureDate.format(c.defaultConfig.dateFormat)); break;
            default:
                a.apc = !1, a.info.PromoCode = "", a.info.Discount = 0 } else a.showError({ bookmsg: [{ $name: "error", $message: c.errorMessages[f.get("locale")].promoCode }] }); return !1 }, a.$watch("isCanPay", function(a, b, c) { a != b && a === !0 && (console.log("Processing..."), c.book(!0)) }), a.initData() }]).controller("SelectBankCtrl", ["$scope", "close", "parent", "gw", "$element", "Scopes", "Factory", "$rootScope", "Flash", function(a, b, c, d, e, f, g, h, i, j, k) { a.errors = [], a.close = function(a) { b(a, 200) }, a.gw = d, a.selectBank = function(a, b) { c.info.paymentType = a, c.info.bank = b }, a.pay = function() { c.isCanPay = !0, a.close(!0) }, a.showError = function(a) { k.create("danger", a, "custom-alert") } }]);
var config = angular.module("ngBus.config", []);
config.factory("Config", function() { var a = {}; return a.apiUrl = "https://api.futabus.vn/api", a.baseApiUrl = "https://api.futabus.vn", a.ApiKey = "29U4pC4uR39DQ4Ue0798I3YeTMZCLAnf", a.defaultConfig = { datePickerLang: "vi", datePickerFormat: "dd-mm-yyyy", dateFormat: "DD-MM-YYYY", timeFormat: "HH:mm", dateTimeFormat: "HH:mm:ss DD/MM/YYYY", isoDateTimeFormat: "YYYY-MM-DDTHH:mm:ss.000", validateFormat: "/^d{2}-d{2}-d{4}$/", glFormat: "YYYY-MM-DD" }, a.bookingConfig = { endDate: new Date(2016, 0, 15) }, a.fields = [], a.errorMessages = { "en-US": { departureDate: "Please select departure date", CustName: "Please enter your full name", CustEmail: "Please enter your email", CustMobile: "Please enter your mobile phone number", CustCountry: "Please select your country", CustState: "Please select state", CustCity: "Please enter your city", CustAddress: "Please enter your address", AcceptCondition: "Please accept with our terms and policies", selectRoute: "Please select route", departureTime: "Please select departure time", pickUpPoint: "Please select pickup point", selectSeatNum: "Please select seat", promoCode: "Promotion code is invalid", promoCodePolicy: "DO NOT apply Promotion code for seat(s) in the GOLD HOUR", selectGateway: "Please select payment gateway", selectPaymentType: "Please select payment type", selectBank: "Please select bank card" }, "vi-VN": { departureDate: "Vui lòng chọn ngày khởi hành", CustName: "Vui lòng điền họ tên hành khách", CustEmail: "Vui lòng điền địa chỉ email", CustMobile: "Vui lòng điền số di động", CustCountry: "Vui lòng chọn quốc gia/vùng lãnh thổ", CustState: "Vui lòng chọn bang", CustCity: "Vui lòng điền tỉnh/thành phố", CustAddress: "Vui lòng điền địa chỉ", AcceptCondition: "Vui lòng chấp nhận điều khoản đặt vé của FUTA Bus Lines", selectRoute: "Vui lòng chọn tuyến", departureTime: "Vui lòng chọn giờ khởi hành", pickUpPoint: "Vui lòng chọn điểm lên xe", selectSeatNum: "Vui lòng chọn số ghế", CustProvince: "Vui lòng chọn tỉnh/tp", CustCity2: "Vui lòng chọn quận/huyện", promoCode: "Mã giảm giá không hợp lệ", promoCodePolicy: "Không áp dụng mã khuyến mãi cho những ghế/giường trong chương trình giảm giá khác", selectGateway: "Vui lòng chọn cổng thanh toán", selectPaymentType: "Vui lòng chọn hình thức thanh toán", selectBank: "Vui lòng chọn loại thẻ" } }, a.minMessages = { "en-US": { selectSeatNum: "Please select seat" }, "vi-VN": { selectSeatNum: "Vui lòng chọn số ghế" } }, a.maxMessages = { "en-US": { selectSeatNum: "Number of selected seat is enough" }, "vi-VN": { selectSeatNum: "Đã chọn đủ số ghế" } }, a.futaNumberMessage = { "en-US": { CustMobile: "Mobile number is wrong", CustMobile2: "Second mobile number is wrong", CustSN: "Passport must be number" }, "vi-VN": { CustMobile: "Số điện thoại phải bắt đầu bằng số 0 và chỉ có 10 đến 11 số", CustMobile2: "Số điện thoại 2 phải bắt đầu bằng số 0 và chỉ có 10 đến 11 số", CustSN: "Chứng minh thư phải là số" } }, a.seatTypes = { "en-US": { 402: "Seater", 403: "Sleeper", 1454: "Limousine" }, "vi-VN": { 402: "Ghế", 403: "Giường", 1454: "Limousine" } }, a.emailMessage = { "en-US": { CustEmail: "Email is wrong format" }, "vi-VN": { CustEmail: "Địa chỉ email không đúng" } }, a }), angular.module("ngBus.services", []).factory("Factory", ["Config", "$http", "$cookies", function(a, b, c) { var d = a.apiUrl,
        e = {},
        f = parseInt(settings.Version); return isNaN(f) && (f = 1), e.getStops = function() { var a = { Version: f }; return b(this.baseRequest("/queryroutes", a)).then(function(a) { return a.data }) }, e.getSchedules = function(a, c, d) { var e = { Version: f, OriginCode: a, DestCode: c, DepartureDate: d }; return b(this.baseRequest("/queryroutewithprice", e)).then(function(a) { return a.data }) }, e.getTimeTables = function(a, c) { var d = { Version: f, RouteId: a, DepartureDate: c }; return b(this.baseRequest("/querytimetable", d)).then(function(a) { return a.data }) }, e.getPickupPoints = function(a, c, d) { var e = { Version: f, RouteId: a, DepartureTime: c, DepartureDate: d }; return b(this.baseRequest("/queryboardingpoint", e)).then(function(a) { return a.data }) }, e.getSeats = function(a, c, d, e, g) { var h = { Version: f, RouteId: a, DepartureDate: c, DepartureTime: d, Kind: e, CarBookingId: g }; return b(this.baseRequest("/queryseat", h)).then(function(a) { return a.data }) }, e.getSupportBanks = function() { var a = { Version: f }; return b(this.baseRequest("/banks", a)).then(function(a) { return a.data }) }, e.bookSeat = function(a, c) { var d = this.baseRequest("/querybookticket", a); return d.headers["X-Rebooking"] = c, b(d).then(function(a) { return a.data }) }, e.getDetail = function(a) { var c = { BookingNo: a }; return b(this.baseRequest("/getbookticket", c)).then(function(a) { return a.data }) }, e.getPickupPointsInRoute = function(a) { var c = { Version: f, RouteId: a, Page: 1, NumRowPerPage: 100 }; return b(this.baseRequest("/querypickupinroute", c)).then(function(a) { return a.data }) }, e.getShipPoints = function(a, c, d) { var e = { Version: f, RouteId: a, Page: c, NumRowPerPage: d }; return b(this.baseRequest("/queryshuttle", e)).then(function(a) { return a.data }) }, e.getPrice = function(a, c, d) { var e = { Version: f, RouteId: a, DepartureDate: c, KindId: d }; return b(this.baseRequest("/queryprice", e)).then(function(a) { return a.data }) }, e.getProvince = function() { var a = { Version: f }; return b(this.baseRequest("/queryprovince", a)).then(function(a) { return a.data }) }, e.getCity = function(a) { var c = { Version: f, ProvinceId: a }; return b(this.baseRequest("/querycity", c)).then(function(a) { return a.data }) }, e.login = function(a, c) { var d = { UserName: a, Password: c }; return b({ method: "POST", url: "/vi-VN/User/Login", data: d }).then(function(a) { return a.data }) }, e.payViFuta = function(a, c) { var d = { BookingNo: a, PromoCode: c }; return b({ method: "POST", url: "/vi-VN/Booking/PayViFuta", data: d }).then(function(a) { return a.data }) }, e.checkPromoCode = function(a, c, d) { var e = { Code: a, RouteId: c, DepartureDate: d }; return b(this.baseRequest("/isvalidcode", e)).then(function(a) { return a.data }) }, e.baseRequest = function(b, c) { return { method: "POST", url: d + b, headers: { "X-ApiKey": a.ApiKey }, data: c } }, e }]).factory("svcQueue", function(a, b) { var c = [],
        d = function() { var a = c[0];
            b(a.c).then(function(b) { c.shift(), a.d.resolve(b), c.length > 0 && d() }, function(b) { a.d.reject(b) }) }; return function(b) { var e = a.defer(); return c.push({ c: b, d: e }), 1 === c.length && d(), e.promise } }), angular.module("ngBus.directives", []).directive("appVersion", ["version", function(a) { return function(b, c, d) { c.text(a) } }]).directive("dateselect", ["Config", function(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) { var f = b.$eval(d.ngModel),
                g = angular.element("html").attr("lang"); switch (g) {
                case "en-US":
                    $(c).datepicker({ language: "en", format: a.defaultConfig.datePickerFormat, autoclose: !0 }); break;
                default:
                    $(c).datepicker({ language: a.defaultConfig.datePickerLang, format: a.defaultConfig.datePickerFormat, autoclose: !0, weekStart: 1 }) } if ("undefined" != typeof d.mindate) { var h = moment(d.mindate, "DD-MM-YYYY");
                null != h && h._isAMomentObject && $(c).datepicker("setStartDate", h.toDate()) } if ("undefined" != typeof d.maxdate) { var i = moment(d.maxdate, "DD-MM-YYYY");
                null != i && i._isAMomentObject && $(c).datepicker("setEndDate", i.toDate()) }
            c.closest(".controls").find("i").on("click", function(a) { a.preventDefault(), $(c).datepicker("show") }), e.$parsers.push(function(b) { return moment(b, a.defaultConfig.dateFormat).startOf("day") }), e.$formatters.shift(), e.$formatters.push(function(b) { return "undefined" != typeof b && null != b ? b.startOf("day").format(a.defaultConfig.dateFormat) : "" }), "undefined" != typeof f && null != f && $(c).datepicker("update", f.toDate()) }
    }
}]).directive("datetimeselect", ["Config", function(a) { return { restrict: "A", require: "ngModel", link: function(b, c, d, e) { $(c).datetimepicker({ format: a.defaultConfig.dateTimeFormat }), c.on("dp.change", function(c) { b.$apply(function() { var b = moment(c.date);
                    e.$setViewValue(b.format(a.defaultConfig.dateTimeFormat)) }) }), e.$parsers.push(function(a) { return a }), e.$formatters.push(function(b) { return moment(b).format(a.defaultConfig.dateTimeFormat) }) } } }]).directive("timeselect", ["Config", function(a) { return { require: "ngModel", link: function(b, c, d, e) { $(c).timepicker({ showMeridian: !1, showInputs: !1 }), c.next().find("i").on("click", function(a) { a.preventDefault(), $(c).timepicker("showWidget") }), e.$parsers.push(function(b) { return moment(b, a.defaultConfig.timeFormat) }), e.$formatters.push(function(b) { return b.format(a.defaultConfig.timeFormat) }) } } }]).directive("ngConfirmClick", [function() { return { restrict: "A", link: function(a, b, c) { b.bind("click", function() { var b = c.ngConfirmMessage;
                b && confirm(b) && a.$apply(c.ngConfirmClick) }) } } }]).directive("svcPagination", [function() { return { restrict: "E", link: function(a, b, c) { a.$watchGroup(["totalRecord", "currentPage"], function() { for (var b = Math.ceil(parseInt(c.totalRecord) / parseInt(c.limit)), d = 5, e = 5, f = [], g = a.currentPage - d; g < a.currentPage; g++) g >= 1 && f.push(g); for (var h = [], i = a.currentPage + 1; i < a.currentPage + e; i++) i <= b && h.push(i);
                a.prevPagesArr = f, a.nextPagesArr = h, a.totalPage = b }), a.setCurrent = function(b) { a.currentPage = b, a.offset = (b - 1) * c.limit, a.reload() } }, templateUrl: "/js/modules/bus/partials/pagination.html" } }]).directive("loader", ["$rootScope", function(a) { return function(a, b, c) { return a.$on("loader_show", function() { return b.removeClass("hidden") }), a.$on("loader_hide", function() { return b.addClass("hidden") }) } }]).directive("vietnamPhone", function() { return { restrict: "A", require: "ngModel", link: function(a, b, c, d) {
            function e(a) { return null != a && "" !== a ? /^0\d{9,10}$/.test(a) ? d.$setValidity("futaNumber", !0) : d.$setValidity("futaNumber", !1) : d.$setValidity("futaNumber", !0), a }
            d.$parsers.push(e) } } }).directive("snNumber", function() { return { restrict: "A", require: "ngModel", link: function(a, b, c, d) {
            function e(a) { return null != a && "" !== a ? /^\d+$/.test(a) ? d.$setValidity("futaNumber", !0) : d.$setValidity("futaNumber", !1) : d.$setValidity("futaNumber", !0), a }
            d.$parsers.push(e) } } }).directive("internationalPhone", function() { return { restrict: "A", require: "ngModel", link: function(a, b, c, d) {
            function e(a) { return null != a && "" !== a ? /^[0-9\-\+]+$/.test(a) ? d.$setValidity("futaNumber", !0) : d.$setValidity("futaNumber", !1) : d.$setValidity("futaNumber", !0), a }
            d.$parsers.push(e) } } }).directive("selectRequired", function() { return { restrict: "A", require: "ngModel", link: function(a, b, c, d) {
            function e(a) { return null != a && "" !== a ? 0 !== a.Value && "" !== a.Value || d.$setValidity("selectRequired", !1) : d.$setValidity("selectRequired", !0), a }
            d.$parsers.push(e) } } }), angular.module("ngBus.filters", []).filter("interpolate", ["version", function(a) { return function(b) { return String(b).replace(/\%VERSION\%/gm, a) } }]).filter("svcDate", ["Config", function(a) { return function(b) { return null != b && "" !== b ? moment(b).format(a.defaultConfig.dateFormat) : "" } }]).filter("svcTime", ["Config", function(a) { return function(b) { return null != b && "" !== b ? moment(b).format(a.defaultConfig.timeFormat) : "" } }]).filter("svcDateTime", ["Config", function(a) { return function(b) { return null != b && "" !== b ? moment(b).format(a.defaultConfig.dateTimeFormat) : "" } }]).filter("svcMoney", function() { return function(a) { var b = parseInt(a); return isNaN(b) ? 0 : b.formatMoney(0, ",", ".") + "<sup>&#8363;</sup>" } }).filter("svcDistance", function() { return function(a) { var b = parseInt(a); return isNaN(b) || 0 === b ? "..." : Math.ceil(b / 1e3) } }).filter("svcDuration", function() { return function(a) { var b = parseInt(a); if (isNaN(b) || 0 === b) return "..."; var c = moment.duration(b, "seconds"); return c.humanize() } }).filter("svcIsUpdating", function() { return function(a) { return angular.isDefined(a) } }).filter("keylength", function() { return function(a) { if (!angular.isObject(a)) throw Error("Usage of non-objects with keylength filter!!"); return Object.keys(a).length } });